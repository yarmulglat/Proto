<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_haggar_grabidle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>shadow</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>z=0;
as=0;
image_speed = .2;

reset = false;
vulnerable = true;
stunned = false;
tenderized = 1;
maxtenderized = 2;

canattack = true;

canjump = true;
jump = false;

jpower = 6;
jpowermax = 25;

throwpower = 10;
tpowermax = 20;

cangrab = true;
grab = false;
grabbed = false;


throwing = false;
thrown = false;
dunk = false;

slammed = false;
dunked = false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>cangrab = true;
canattack = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>canjump = true;
jpower = 6;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>601</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_execute_script</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>9</kind>
            <script>scr_find_depth</script>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
          <argument>
            <kind>0</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(z&gt;0)//if we're above the ground
{
    z+=as//we increase our height by our current "air speed"
    as-=.9//our air speed decreases by 1, eventually it go below zero and we'll fall
    if grab = true {
        as-=.7}
    if z &gt;=90 {
        as-=.1}
    if z&gt;= 450{
        as-=2}
}
if(z&lt;1 and as!=0)//if we've hit the ground
{
    jump = false;
    z=0;//this keeps us from going below the ground, so to speak
    as=0;//we stop moving through the air
}

if jump = false{  //test to stop dunk movement
    hspeed = 0}

//draw sprite and shadow
draw_sprite(spr_small_shadow,0,x-1,y+7)
draw_sprite_ext(sprite_index,image_index,x,y-z,2,2,image_angle,image_blend,image_alpha)
    

//input and animation
if throwing == false &amp;&amp; dunk == false{


   if (z&lt;1 and as!=0){
        sprite_index = spr_haggar_walk}
    
    if(keyboard_check(vk_right) &amp;&amp; place_free(x+4.4,y) &amp;&amp; sprite_index != spr_haggar_punch &amp;&amp; sprite_index != spr_haggar_grab /*&amp;&amp; sprite_index != spr_haggar_jump*/ &amp;&amp; sprite_index != spr_haggar_crouch &amp;&amp; sprite_index != spr_haggar_chargegrab) {
        x+=4.4;
        if jump == false{ sprite_index = spr_haggar_walk
        image_speed = .2;
        image_xscale = 1;}
    }
    if(keyboard_check(vk_left) &amp;&amp; place_free(x-4.4,y) &amp;&amp; sprite_index != spr_haggar_punch &amp;&amp; sprite_index != spr_haggar_grab /*&amp;&amp; sprite_index != spr_haggar_jump*/ &amp;&amp; sprite_index != spr_haggar_crouch &amp;&amp; sprite_index != spr_haggar_chargegrab) {
        x-=4.4;
        if jump == false{sprite_index = spr_haggar_walk
        image_speed = .2;
        image_xscale = -1;}
    }
    if(keyboard_check(vk_up) &amp;&amp; place_free(x,y-4) &amp;&amp; sprite_index != spr_haggar_punch &amp;&amp; sprite_index != spr_haggar_grab &amp;&amp; sprite_index != spr_haggar_jump &amp;&amp; sprite_index != spr_haggar_crouch &amp;&amp; sprite_index != spr_haggar_chargegrab) {
        y-=4;
       if jump == false{ sprite_index = spr_haggar_walk
        image_speed = .2;}
    }
    if(keyboard_check(vk_down) &amp;&amp; place_free(x,y+4) &amp;&amp; sprite_index != spr_haggar_punch &amp;&amp; sprite_index != spr_haggar_grab &amp;&amp; sprite_index != spr_haggar_jump &amp;&amp; sprite_index != spr_haggar_crouch &amp;&amp; sprite_index != spr_haggar_chargegrab) {
        y+=4;
        if jump == false{sprite_index = spr_haggar_walk
        image_speed = .2;}
    }

    
    
 {     
    //CHARGE JUMP 
    if(keyboard_check_pressed(vk_space) &amp;&amp; (z == 0)){
        sprite_index = spr_haggar_crouch} 
        image_speed = .2;
    if(keyboard_check(vk_space) &amp;&amp; (z == 0)){
        if jpower &lt; jpowermax{
        jpower += .8;
        }
        
}
    
   else if(keyboard_check_released(vk_space) &amp;&amp; (z = 0)) &amp;&amp; grab = false {
        jump = true;
        sprite_index = spr_haggar_jump;
        image_speed = .5;
        z = 1;
        as = jpower;
        canjump = false;
        alarm[1] = 35; 
        }
    else if (keyboard_check_released(vk_space) &amp;&amp; grab = true &amp;&amp; z = 0){
        jump = true;
        sprite_index = spr_haggar_jump;
        image_speed = .5;
        z = 1;
        as = jpower * obj_abobo.tenderized;
        canjump = false;
        alarm[1] = 35;
    
    }
    
 } //AND THAT'S CHARGE JUMP
     
        
    

    //If you're not doing anything, assume an idle pose    
    if(!keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down) &amp;&amp; sprite_index != spr_haggar_punch &amp;&amp; sprite_index != spr_haggar_crouch &amp;&amp; sprite_index != spr_haggar_chargegrab &amp;&amp; sprite_index != spr_haggar_grab &amp;&amp; sprite_index != spr_haggar_jump &amp;&amp; sprite_index != spr_haggar_throw &amp;&amp; sprite_index != spr_haggar_slam &amp;&amp; sprite_index != spr_haggar_grabwalk) {
        image_speed = .2; 
        sprite_index = spr_haggar_idle;
    } 
    
    //GRAB AND PUNCH

    //GRABBING
{    if keyboard_check_pressed(ord('D')) &amp;&amp; sprite_index !=spr_haggar_grab &amp;&amp; cangrab = true{
        sprite_index = spr_haggar_idle;
        sprite_index = spr_haggar_grab;
        image_speed = .3 
        cangrab = false;
        alarm[2] = 30;
        

        }
}

    //PUNCHING - F
    if keyboard_check_pressed(ord('S')) &amp;&amp; grab == false &amp;&amp; throwing == false &amp;&amp; sprite_index != spr_haggar_punch &amp;&amp; canattack = true{
        sprite_index = spr_haggar_idle;
        sprite_index = spr_haggar_punch;
        if image_index = 1 || 2 {
            mask_index = spr_haggarpunch_mask}
        image_speed = .6 
        canattack = false;
        cangrab = false;
        alarm[2] = 22;
}

 
    //CHARGE THROWING FUNCTIONAL
if grab == true &amp;&amp; jump == false &amp;&amp; keyboard_check(ord('F')) {
    sprite_index = spr_haggar_chargegrab;
    if throwpower &lt; tpowermax {
        throwpower += .5}
     
}    
    if grab == true &amp;&amp; jump == false &amp;&amp; keyboard_check_released(ord('F')) {
    throwing = true;
    grab = false 
    obj_abobo.grabbed = false;
    obj_abobo.thrown = true;
    sprite_index = spr_haggar_throw;
    image_speed = .2; 
    }
}

//DUNK
//DUNK IS FUNCTIONAL
 {
    if jump == true &amp;&amp; grab == true &amp;&amp; z &gt;50 &amp;&amp; obj_abobo.grabbed = true &amp;&amp; keyboard_check_pressed(ord('F')){ 
        if as&lt;=1{
                dunk = true;
                obj_abobo.dunked = true;
                obj_abobo.grabbed = false;
                image_speed = .2; 
                sprite_index = spr_haggar_slam; 
                as-= 2;
                grab = false;
       if dunk == true &amp;&amp; keyboard_check(vk_right) &amp;&amp; image_xscale = 1{
        hspeed = 4}
        else if dunk == true &amp;&amp; keyboard_check(vk_left) &amp;&amp; image_xscale = -1{
        hspeed = -4;
        }
        }
    if as&gt;0{
        throwing = true;
    grab = false 
    obj_abobo.grabbed = false;
    obj_abobo.thrown = true;
    sprite_index = spr_haggar_throw;
    image_speed = .2} 
    }
}
 //Gotta let go  !!!! MUST STAND STILL !!!
    if grab = true &amp;&amp; throwing = false &amp;&amp; keyboard_check_pressed(ord('D')){  
            sprite_index = spr_haggar_idle;
            grab = false;
            thrown = false
            obj_abobo.grabbed = false;
            }
   
    
      //look like you grabbing  - this may need to be updated
if grab = true &amp;&amp; (!keyboard_check(vk_right) &amp;&amp; !keyboard_check(vk_left) &amp;&amp; !keyboard_check(vk_up) &amp;&amp; !keyboard_check(vk_down) &amp;&amp; sprite_index  &amp;&amp; sprite_index != spr_haggar_jump &amp;&amp; sprite_index != spr_haggar_chargegrab){
                sprite_index = spr_haggar_grabidle
                
    }else { 
    if grab = true &amp;&amp; sprite_index != spr_haggar_chargegrab &amp;&amp; sprite_index != spr_haggar_idle{
        sprite_index = spr_haggar_grabwalk;
        }    


}

//Test for reset state - Haven't tried yet

if reset = true{

   reset = false;
    vulnerable = true;
    stunned = false;
    tenderized = 1;

    canattack = true;

    canjump = true;
    jump = false;

    jpower = 6;
    jpowermax = 25;

    throwpower = 10;
    tpowermax = 20;

    cangrab = true;
    grab = false;
    grabbed = false;


    throwing = false;
    thrown = false;
    dunk = false;

    slammed = false;
    dunked = false;
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
//know when you're done throwing or dunking
if sprite_index == spr_haggar_throw{
    throwing = false;
    }
    

if sprite_index == spr_haggar_slam {
   dunk = false 
   sprite_index = spr_haggar_idle
   }
    
//stop grabbing, dude
{
    if(grab = false) &amp;&amp; sprite_index == spr_haggar_grab {
        sprite_index = spr_haggar_idle;
        }

//let him go, dude
{
    if sprite_index == spr_haggar_throw {
        sprite_index = spr_haggar_idle;
        }
}

//the slam is over when it's over
{ 
   if sprite_index == spr_haggar_slam{
    if (as=0 &amp;&amp; z&lt;1){ sprite_index = spr_haggar_idle;
   }
}

    if sprite_index == spr_haggar_jump {
        if as &lt;= 0{ 
        sprite_index = spr_haggar_walk
        }
}


//punch again another day (just not right now)
   if sprite_index == spr_haggar_punch{
    sprite_index = spr_haggar_idle}
   }
    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite(spr_small_shadow,0,x-1,y+7);
draw_sprite_ext(sprite_index,image_index,x,y-z,image_xscale*2,image_yscale*2,image_angle,image_blend,image_alpha)


/* - example of draw from other project
//Draw shadow and object
draw_sprite_ext(sprite_index, 0, x-offset, y-offset, 1, 1, image_angle, c_black, .4);
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>28,114</point>
    <point>58,58</point>
  </PhysicsShapePoints>
</object>
